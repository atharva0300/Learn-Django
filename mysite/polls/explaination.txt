1. polls is the name of the app
2. The path() function contains the 4 parameters 
    => route, views, kwargs, name
    => 1. route is the string that contians the urls patterns. It compares the pattern in the 
        urlspatterns from the urls.py file in the app.  In a request to https://www.example.com/myapp/?page=3, the URLconf will also look for myapp/.
    => 2. when django finds the matching pattern from the urlpatterns, it calls the specified view function from the views.py file 
        with an HttpResponse object as the first argument and any captured values from the route as keyword arguments.
    => 3. kwargs -> arbritary keywords arguments ( dictionary ) can be passed
    => 4. name -> this means naming the url. This helps identify the webpage, determining the template 

3. models.py file -> A model is the single, definitive source of information about your data. 
    It contains the essential fields and behaviors of the data you’re storing. Django follows the DRY Principle. 
    The goal is to define your data model in one place and automatically derive things from it.

    DRY -> DON'T REPEAT YOURSELF

4. makemigrations -> to update the app when there is any change in the database, API that connects the database, we use 
    makemigrations. Syntax -> python manage.py makemigrations polls 
    this creates a migrations folder that contains that contains the extracted ( big ) version of the migration.
    Here after, making migrations after adding Question and Choice, the Question and Choice from the models.py will be added to the app
    This Python-database api can then be used
    By running makemigrations, you’re telling Django that you’ve made some changes to your models (in this case, you’ve made new ones) and 
    that you’d like the changes to be stored as a migration.

    after this, again run 'python manage.py migrate' to run the migrations in the migrations folder of the app 
    this folder has the laatest file 0001.py ( or something like that ), which has the extended version of the model
    The app adds these models 

    The migrate command takes all the migrations that haven’t been applied 
    (Django tracks which ones are applied using a special table in your database called django_migrations) and 
    runs them against your database - essentially, synchronizing the changes you made to your models with the schema 
    in the database.

    The migrations using the 'migrate' is done on the database
    Migrations are very powerful and let you change your models over time, as you develop your project, 
    without the need to delete your database or tables and make new ones - it specializes in upgrading your database live, 
    without losing data.

    ----------------------------------------------
    IMPORTANT : 

    Change your models (in models.py).
    Run python manage.py makemigrations to create migrations for those changes
    Run python manage.py migrate to apply those changes to the database.
    ----------------------------------------------

    




5. sqlmigrate -> The sqlmigrate command doesn’t actually run the migration on your database - instead, 
it prints it to the screen so that you can see what SQL Django thinks is required. 
It’s useful for checking what Django is going to do or if you have database administrators who require SQL scripts for changes.


