1. checking django version -> python -m django --version
2. creating a django project -> django-admin startproject mysite,
where 'mysite' is the name of the project. The 

/*
mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py
*/
mysite -> container of the project 
manage.py -> this is the command utility thats helps in interacting with the django project. It is used in place of django-admin
__init__.py -> tells python that this directory should be considered as a python package
mysite -> this is a actual project ( name of the app -> mysite ), the inner mysite 
settings.py -> the settings/configuration of the app ( not the project ) like installed apps, middlewares, static files, wsgi, templates, databases
auth password validators.
urls.py -> This file maps all the urls of the project. This is the place where the urls are defined.
asgi.py -> entry point for asgi web servers 
wsgi.py -> entry point for wsgi web servers

3. running the project -> python manage.py runserver
Default port -> 8000 on the localhost
can also change the port -> python manage.py runserver 0.0.0.0:8001

4. view.py is the file that has the data which will be displayed.

5. default configurations of django uses SQLite as the database. If you want to use any other database like -> postgresql, oracle, mysql then
    you can edit the settings.py file and change the ENGINE and the NAME and install the appropriate database binding

6. INSTALLED_APPS -> By default 
    1. admin -> The admin site
    2. auth -> the authentication system
    3. contenttypes -> A framework for contenttypes
    4. sessions -> a session framework 
    5. messages -> a messsaging framework 
    6. statisfles -> The framework to manage static files

7. MIGRATE command -> migrate command looks at the installed_apps settings and creates an appropriate database table according to 
    the settings.py file and the database migrations are shifted to the app. This creates a db.sqlie3 file ( if using sqlite )

8. to use the django shell, run the python manage.py shell command

9. Django-admin : Generating admin sites for your staff or clients to add, change, and delete content is 
    tedious work that doesnâ€™t require much creativity. For that reason, Django entirely automates creation of admin 
    interfaces for models.

9. Making the polls app modifiable in the admin : 
    we need to tell the admin that, there is a Question model, so that it can modify it 
    do it by adding admin.site.register(Question) in the polls/admin.py 

